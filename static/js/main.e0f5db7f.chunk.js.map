{"version":3,"sources":["utils/pokemon.ts","components/Card/Card.tsx","components/Navbar/Navbar.tsx","components/Modal/Modal.tsx","App.tsx","hooks/InfiniteScroll.ts","index.tsx"],"names":["getAllPokemon","url","Promise","resolve","reject","fetch","then","res","json","data","getPokemon","Card","props","react_default","a","createElement","Fragment","className","onClick","setShowModalFlag","setPressNumber","index","pokemon","sprites","other","front_default","src","alt","japanesePokemonData","names","name","genera","genus","Navbar","Modal","japaneseType","normal","fire","water","electric","grass","ice","fighting","poison","ground","flying","psychic","bug","rock","ghost","dragon","dark","steel","fairy","flavorTexts","showFlag","flavor_text_entries","filter","language","id","types","map","type","i","key","style","backgroundColor","height","weight","toFixed","flavor_text","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","record","result","__await","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","App","_useState","useState","_useState2","slicedToArray","loading","setLoading","_useState3","_useState4","nextLoading","setNextLoading","_useState5","_useState6","pokemonData","setPokemonData","_useState7","_useState8","setjapanesePokemonData","_useState9","_useState10","showModalFlag","_useState11","_useState12","pressNumber","_useState13","_useState14","intersected","setIntersected","target","useRef","intersection","ref","ops","intersect","setIntersect","useEffect","observer","IntersectionObserver","entries","isIntersecting","current","observe","unobserve","useIntersectionObserver","_ref","asyncToGenerator","_callee","_context","loadPokemon","results","apply","arguments","fetchPokemonData","_ref2","_callee2","_pokemonData","_japanesePokemonData","_context2","all","species","_x","loadNextPokemon","_ref3","_callee3","_context3","concat","toConsumableArray","_x2","handleNextData","useCallback","_callee4","nextURL","_context4","Array","from","Set","components_Navbar_Navbar","esm","visible","width","ariaLabel","wrapperStyle","wrapperClass","colors","components_Modal_Modal","components_Card_Card","ReactDOM","createRoot","document","getElementById","render","StrictMode","dist","basename","process","src_App"],"mappings":"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","file":"static/js/main.e0f5db7f.chunk.js","sourcesContent":["//すべてのポケモンデータを取得\nexport const getAllPokemon = (url: any) => {\n  //resolve: 成功した時, reject: 失敗した時\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then((res) => res.json()) //取得してきたデータをjson形式で返す\n      .then((data) => resolve(data)); //返ってきたデータをdataとして返す\n  });\n};\n\n//各ポケモンの詳細なデータを取得\nexport const getPokemon = (url: any) => {\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then((res) => res.json()) //取得してきたデータをjson形式で返す\n      .then((data) => resolve(data)); //返ってきたデータをdataとして返す\n  });\n};\n","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = (props: any) => {\n  //モーダルを表示する\n  const showModal = () => {\n    props.setShowModalFlag(true);\n    props.setPressNumber(props.index);\n  };\n\n  return (\n    <>\n      <button className=\"card\" onClick={showModal}>\n        <div className=\"cardImg\">\n          {props.pokemon.sprites.other['official-artwork'].front_default ? \n          <img src={props.pokemon.sprites.other['official-artwork'].front_default} alt=\"\" /> :\n          <img src={props.pokemon.sprites.front_default} alt=\"\" />\n          }\n          </div>\n        <h3 className=\"cardName\">{props.japanesePokemonData.names[0].name}</h3>\n        <div className=\"cardData\">\n          <p>{props.japanesePokemonData.genera[0].genus}</p>\n        </div>\n        {/* <div className=\"cardTypes\">\n          <div>タイプ</div>\n          {props.pokemon.types.map((type, i) => {\n            return (\n              <div key={i}>\n                <span className=\"typeName\">{japaneseType[type.type.name]}</span>\n              </div>\n            );\n          })}\n        </div> */}\n      </button>\n    </>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport \"./Navbar.css\";\n\nconst Navbar = () => {\n  return (\n    <nav>ポケモン図鑑</nav>\n  )\n}\n\nexport default Navbar","import React from \"react\";\nimport \"./Modal.css\";\n\nconst Modal = (props: any) => {\n  //ポケモンのタイプを日本語化\n  const japaneseType:{ [key: string]: [string, string] } = {\n    normal: [\"ノーマル\", \"#aea886\"],\n    fire: [\"ほのお\", \"#f45c19\"],\n    water: [\"みず\", \"#4a96d6\"],\n    electric: [\"でんき\", \"#eaa317\"],\n    grass: [\"くさ\", \"#28b25c\"],\n    ice: [\"こおり\", \"#45a9c0\"],\n    fighting: [\"かくとう\", \"#9a3d3e\"],\n    poison: [\"どく\", \"#8f5b98\"],\n    ground: [\"じめん\", \"#916d3c\"],\n    flying: [\"ひこう\", \"#7e9ecf\"],\n    psychic: [\"エスパー\", \"#d56d8b\"],\n    bug: [\"むし\", \"#989001\"],\n    rock: [\"いわ\", \"#878052\"],\n    ghost: [\"ゴースト\", \"#555fa4\"],\n    dragon: [\"ドラゴン\", \"#454ba6\"],\n    dark: [\"あく\", \"#7a0049\"],\n    steel: [\"はがね\", \"#9b9b9b\"],\n    fairy: [\"フェアリー\", \"#ffbbff\"],\n  };\n\n  //モーダルを閉じる\n  const closeModal = () => {\n    props.setShowModalFlag(false);\n  };\n\n  let flavorTexts = [];\n  if (props.showFlag) {\n    flavorTexts = props.japanesePokemonData.flavor_text_entries.filter(\n      (data: any) => {\n        return data.language.name === \"ja\";\n      }\n      );\n    }\n\n  return <>\n    {props.showFlag ? (\n      <div className=\"overlay\">\n        <div className=\"modalContent\">\n          <div className=\"modalInfo\">\n            <button className=\"modalClose\" onClick={closeModal} />\n            <p className=\"pokemonIndex\">No.{props.pokemon.id}</p>\n            <h3>{props.japanesePokemonData.names[0].name}</h3>\n            <p>{props.japanesePokemonData.genera[0].genus}</p>\n            <p className=\"pokemonType\">\n              {props.pokemon.types.map((type: any, i: any) => {\n                return (\n                  <span key={i} style={{ backgroundColor: japaneseType[type.type.name][1] }}>\n                    {japaneseType[type.type.name][0]}{\" \"}\n                  </span>\n                );\n              })}\n            </p>\n            <p>\n              高さ：{props.pokemon.height / 10}m　重さ：\n              {(props.pokemon.weight / 10).toFixed(1)}kg\n            </p>\n            <div className=\"pokemonExplanation\">\n              <p>{flavorTexts[0].flavor_text}</p>\n            </div>\n          </div>\n          <div className=\"modalImg\">\n            <img\n              src={\n                props.pokemon.sprites.other[\"official-artwork\"].front_default\n              }\n              alt=\"\"\n            />\n          </div>\n        </div>\n      </div>\n    ) : (\n      <></>\n    )}\n  </>;\n};\n\nexport default Modal;\n","import React, { useCallback, useRef, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { getAllPokemon, getPokemon } from \"../src/utils/pokemon\";\nimport Card from \"./components/Card/Card\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Modal from \"./components/Modal/Modal\";\nimport { ColorRing } from \"react-loader-spinner\";\nimport { useIntersectionObserver } from \"./hooks/InfiniteScroll\";\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [nextLoading, setNextLoading] = useState(true);\n  let [pokemonData, setPokemonData] = useState<string[]>([]);\n  let [japanesePokemonData, setjapanesePokemonData] = useState<string[]>([]);\n  const [showModalFlag, setShowModalFlag] = useState(false); // Modalコンポーネントの表示の状態を定義する\n  const [pressNumber, setPressNumber] = useState(0);\n  const [intersected, setIntersected] = useState<boolean>(true);\n\n  const initialURL = \"https://pokeapi.co/api/v2/pokemon?_limit=50\";\n  const target = useRef<HTMLDivElement>(null) as React.MutableRefObject<HTMLDivElement>;\n  const intersection = useIntersectionObserver(target);\n\n  useEffect(() => {\n    //すべてのポケモンデータを取得\n    const fetchPokemonData = async () => {\n      let res: any = await getAllPokemon(initialURL);\n      //各ポケモンの詳細なデータを取得\n      loadPokemon(res.results);\n      // console.log(res);\n      setLoading(false);\n    };\n    fetchPokemonData();\n  }, []);\n\n  //各ポケモンの詳細なデータを取得\n  const loadPokemon = async (data: any) => {\n    //Promise.all(): 「すべてのタスクが完了したら」\n    let _pokemonData: any = await Promise.all(\n      data.map((pokemon: any) => {\n        let pokemonRecord = getPokemon(pokemon.url);\n        return pokemonRecord;\n      })\n    );\n\n    let _japanesePokemonData: any = await Promise.all(\n      _pokemonData.map((pokemon: any) => {\n        let pokemonRecord = getPokemon(pokemon.species.url);\n        return pokemonRecord;\n      })\n    );\n\n    setPokemonData(_pokemonData);\n    setjapanesePokemonData(_japanesePokemonData);\n  };\n\n  const loadNextPokemon = async (data: any) => {\n    let _pokemonData: any = await Promise.all(\n      data.map((pokemon: any) => {\n        let pokemonRecord = getPokemon(pokemon.url);\n        return pokemonRecord;\n      })\n    );\n\n    let _japanesePokemonData: any = await Promise.all(\n      _pokemonData.map((pokemon: any) => {\n        let pokemonRecord = getPokemon(pokemon.species.url);\n        return pokemonRecord;\n      })\n    );\n  \n    setPokemonData([...pokemonData, ..._pokemonData]);\n    setjapanesePokemonData([...japanesePokemonData, ..._japanesePokemonData]);\n\n  }\n\n  //次のページに遷移\n  const handleNextData = useCallback(async () => {\n  let nextURL = \"https://pokeapi.co/api/v2/pokemon?offset=\" + pokemonData.length + \"&limit=50\";\n\n    setNextLoading(true);\n    let data: any = await getAllPokemon(nextURL);\n    await loadNextPokemon(data.results);\n    setNextLoading(false);\n  }, [pokemonData]);\n\n  useEffect(() => {\n    setIntersected(intersection);\n  }, [intersection]);\n\n  useEffect(() => {\n    if (intersected) {\n      handleNextData();\n    pokemonData = Array.from(new Set(pokemonData))\n    }\n  }, [intersected]);\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"App\">\n        {loading ? (\n          <ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"blocks-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"blocks-wrapper\"\n            colors={[\"#e15b64\", \"#f47e60\", \"#f8b26a\", \"#abbd81\", \"#849b87\"]}\n          />\n        ) : (\n          <>\n            <Modal\n              showFlag={showModalFlag}\n              setShowModalFlag={setShowModalFlag}\n              showModalFlag={showModalFlag}\n              pokemon={pokemonData[pressNumber]}\n              japanesePokemonData={japanesePokemonData[pressNumber]}\n              pressNumber={pressNumber}\n            />\n            <div className=\"pokemonCardConteainer\">\n              {pokemonData.map((pokemon, i) => {\n                return (\n                  <div key={i}>\n                    <Card\n                      index={i}\n                      setShowModalFlag={setShowModalFlag}\n                      setPressNumber={setPressNumber}\n                      showModalFlag={showModalFlag}\n                      japanesePokemonData={japanesePokemonData[i]}\n                      pokemon={pokemon}\n                      pressNumber={pressNumber}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n            <div ref={target} style={{ width: 200, height: 200 }}></div>\n            {nextLoading ? (\n              <ColorRing\n                visible={true}\n                height=\"80\"\n                width=\"80\"\n                ariaLabel=\"blocks-loading\"\n                wrapperStyle={{}}\n                wrapperClass=\"blocks-wrapper\"\n                colors={[\"#e15b64\", \"#f47e60\", \"#f8b26a\", \"#abbd81\", \"#849b87\"]}\n              />\n            ) : \"\"}\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { useState, useEffect, RefObject } from \"react\";\n\nexport function useIntersectionObserver(\n  ref: RefObject<HTMLDivElement>,\n  ops?: IntersectionObserverInit\n) {\n  const [intersect, setIntersect] = useState<boolean>(false);\n  useEffect(() => {\n    function callback(entries: IntersectionObserverEntry[]) {\n      entries.forEach(entry => {\n        setIntersect(entry.isIntersecting);\n      });\n    }\n\n    const observer = new IntersectionObserver(callback, ops);\n    \n    if (ref.current === null) {\n      return;\n    }\n    \n    observer.observe(ref.current);\n    \n    return () => {\n      if (ref.current !== null) {\n        observer.unobserve(ref.current);\n      }\n    };\n  });\n  \n  return intersect;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\")!);\nroot.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>\n);\n"],"sourceRoot":""}